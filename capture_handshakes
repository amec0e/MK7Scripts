#!/bin/bash

LOCK_FILE="/tmp/$(basename "${0}").lock"
if [ -e "$LOCK_FILE" ]; then
    echo "Another instance of the script is already running."
    echo "or the lock file needs to be removed."
    echo "Remove lockfile: rm /tmp/$(basename "${0}").lock"
    exit 1
fi
touch "${LOCK_FILE}"

# Initialize variables
FILE=""              # Path to the original input file
TIMER=""
SHUFFLE=false
UPDATE=false
MODE=2
CDATE=$(date "+%H-%M-%S")
PMODE=""
SCREENUID=$(openssl rand -hex 8)
UPDATE_FILE="/tmp/$(basename "${0}").temp"
IS_24GHZ_SUPPORTED=false
IS_5GHZ_SUPPORTED=false
SKIPPED_AP_DELAY=2

# Option for keeping the validated file.
# By default KEEP_FILE is false (the validated file will be deleted).
KEEP_FILE=false

# Airodump variables
DEFAULT_SCANTIME=30
DEFAULT_FILTERBYDATA=0
DEFAULT_WRITEINT=1
DEFAULT_FILTERUNASSOC=true
AIRODUMP_OUTPUT="/root/handshakes/"

# Valid channel arrays
VALID_24GHZ_CHANNELS=(1 2 3 4 5 6 7 8 9 10 11 12 13 14)
VALID_5GHZ_CHANNELS=(36 40 44 48 52 56 60 64 100 104 108 112 116 120 124 128 132 136 140 144 149 153 157 161 165 173)

trap cleanup EXIT SIGINT SIGTERM

#----------------------------------------------------------
# Function: usage
#----------------------------------------------------------
usage() {
    echo "Usage: $0 [-h] [-f FILE] [-t TIMER] [-i INTERFACE] [-m MODE] [-s] [-u] [--kf]"
    echo
    echo "Options:"
    echo "  -h             Display this help menu."
    echo "  -f FILE        Input file containing BSSIDs and channels."
    echo "  -t TIMER       Time to capture per target in seconds."
    echo "  -s             Shuffle lines in the input file."
    echo "  -u             Update BSSID channels."
    echo "  -m MODE        Capture mode: 1 = Pineap, 2 = Airodump-ng (default: 2)."
    echo "  -i INTERFACE   Specify interface for mode 1 or 2 (not needed for -m 1)."
    echo "  --kf           Keep the validated file after processing (default is to delete it)."
    echo
    echo "FILE FORMAT:"
    echo "BSSID,CHANNEL"
    echo
    echo "Usage (Update channels): ${0} -f bssids.txt -t 1 -i iface -u"
    echo "Usage (default): ${0} -f bssids.txt -t 3600 -i iface -m 1"
    echo
    echo "NOTE:"
    echo 
    echo "-m 1 uses PineAPs currently selected interface so -i is not needed."
    echo "however it can be used with -m 1"
    echo
    exitfail
}

#----------------------------------------------------------
# Function: cleanup
#----------------------------------------------------------
cleanup() {
    trap - EXIT SIGINT SIGTERM
    echo -e "\nStopping any running scans."
    pineap handshake_capture_stop 2>/dev/null
    if screen -list | grep -q "capture-${SCREENUID}"; then
        screen -S "capture-${SCREENUID}" -X quit
    fi
    # Remove the validated file unless KEEP_FILE is true and FILE differs from the original.
    keep_file_after 2>/dev/null
    rm "${LOCK_FILE}" 2>/dev/null
    rm "${UPDATE_FILE}"* 2>/dev/null
    pkill -P $$
    wait
    echo "Done."
    exit 0
}

#----------------------------------------------------------
# Function: exitfail
#----------------------------------------------------------
exitfail() {
    rm "${LOCK_FILE}"
    exit 1
}

#----------------------------------------------------------
# Function: keep_file_after
#----------------------------------------------------------
keep_file_after() {
    if [ "${KEEP_FILE}" == false ]; then
        if [ "${FILE}" != "${ORIGIN_FILE}" ]; then
            echo "Removing Generated File ${FILE}"
            rm "${FILE}"
        fi
    fi
    if [ "${KEEP_FILE}" == false ]; then
        if [ "${SHUFFLE}" == true ]; then
            echo "Removing shuffled file ${SHUFFLE_FILE}"
            rm "/tmp/${SHUFFLE_FILE}"
        fi
    fi
}

#----------------------------------------------------------
# Function: remove_update_temp
#----------------------------------------------------------
remove_update_temp() {
    rm "${UPDATE_FILE}"* 2>/dev/null
}

#----------------------------------------------------------
# Function: detect_supported_bands
#----------------------------------------------------------
detect_supported_bands() {
    if [ -n "${AINTERFACE}" ]; then
        INTERFACE="${AINTERFACE}"
    fi
    PHY=$(iw dev | awk -v iface="${INTERFACE}" '$1 ~ /^phy#/ { phy=$1 } $1 == "Interface" && $2 == iface { print phy; exit }' | tr -d '#')
    if [ -z "${PHY}" ]; then
        echo "[ERROR]: Unable to find phy index for interface ${INTERFACE}. Exiting."
        exit 1
    fi
    SUPPORTED_CHANNELS=$(iw phy "${PHY}" info | awk '/Frequencies:/,/^$/' | grep -oE '\[[0-9]+\]' | tr -d '[]')
    for channel in ${SUPPORTED_CHANNELS}; do
        if [[ " ${VALID_24GHZ_CHANNELS[@]} " =~ " ${channel} " ]]; then
            IS_24GHZ_SUPPORTED=true
            break
        fi
    done
    for channel in ${SUPPORTED_CHANNELS}; do
        if [[ " ${VALID_5GHZ_CHANNELS[@]} " =~ " ${channel} " ]]; then
            IS_5GHZ_SUPPORTED=true
            break
        fi
    done
    IS_24GHZ_SUPPORTED=${IS_24GHZ_SUPPORTED:-false}
    IS_5GHZ_SUPPORTED=${IS_5GHZ_SUPPORTED:-false}
#    echo "2.4GHz Supported: ${IS_24GHZ_SUPPORTED}"
#    echo "5GHz Supported: ${IS_5GHZ_SUPPORTED}"
}

#----------------------------------------------------------
# Function: updatechannels
#----------------------------------------------------------
updatechannels() {
    remove_update_temp
    echo "Updating input file channels. Please wait..."
    echo "SCANTIME: ${SCANTIME}s, FILTERBYDATA: ${FILTERBYDATA}, WRITEINT: ${WRITEINT}s, FILTERUNASSOC: ${FILTERUNASSOC}"
    echo "INTERFACE: ${INTERFACE}"
    detect_supported_bands
    if [ "${IS_24GHZ_SUPPORTED}" == true ] && [ "${IS_5GHZ_SUPPORTED}" == true ]; then
        echo "Both 2.4GHz and 5GHz supported. Please select a band:"
        echo "1. 2.4GHz"
        echo "2. 5GHz"
        echo "3. Both"
        read -p "Enter your choice (1/2/3): " BAND_CHOICE
        case "$BAND_CHOICE" in
            1) BAND="gb"; echo "You selected 2.4GHz." ;;
            2) BAND="a"; echo "You selected 5GHz." ;;
            3) BAND="agb"; echo "You selected both 2.4GHz and 5GHz." ;;
            *) echo "Invalid choice, defaulting to both bands."; BAND="agb" ;;
        esac
    elif [ "${IS_24GHZ_SUPPORTED}" == true ]; then
        BAND="gb"
        echo "Only 2.4GHz supported."
    elif [ "${IS_5GHZ_SUPPORTED}" == true ]; then
        BAND="a"
        echo "Only 5GHz supported."
    else
        echo "Error: No supported bands detected for the selected interface."
        exitfail
    fi
    if [ "${FILTERUNASSOC}" == true ]; then
        airodump-ng --band "${BAND}" --output-format csv --write-interval "${WRITEINT}" -n "${FILTERBYDATA}" -w "${UPDATE_FILE}" -a "${INTERFACE}" &
        sleep "${SCANTIME}"
        kill $!
    else
        airodump-ng --band "${BAND}" --output-format csv --write-interval "${WRITEINT}" -n "${FILTERBYDATA}" -w "${UPDATE_FILE}" "${INTERFACE}" &
        sleep "${SCANTIME}"
        kill $!
    fi
    process_channels
}

#----------------------------------------------------------
# Function: process_channels
#----------------------------------------------------------
process_channels() {
    while IFS=',' read -r bssid old_channel; do
        new_channel=$(grep "${bssid}" "${UPDATE_FILE}"-01.csv | head -n 1 | cut -d ',' -f 4)
        awk -F',' -v OFS=',' -v bssid="${bssid}" -v new_channel="${new_channel}" 'BEGIN { OFS = "," } $1 == bssid { gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2); gsub(/^[[:space:]]+|[[:space:]]+$/, "", new_channel); if ($2 != new_channel) $2 = new_channel; print } $1 != bssid' "$FILE" > temp && mv temp "$FILE"
    done < "${FILE}"
    remove_update_temp
    echo "All BSSID channels have been updated."
    echo "Please check your input file and re-run the script if needed."
    exitfail
}

#----------------------------------------------------------
# Function: ainterface_check
#----------------------------------------------------------
ainterface_check() {
    if [ -z "${AINTERFACE}" ]; then
        echo "[WARN] No Mode 2 interface specified with -I. Using default interface '${INTERFACE}'."
        AINTERFACE="${INTERFACE}"
    fi
    if iwconfig "${AINTERFACE}" 2>&1 | grep -q "No such device"; then
        echo "[ERROR] The interface '${AINTERFACE}' is not valid or does not exist."
        exitfail
    fi
    if ! iwconfig "${AINTERFACE}" 2>&1 | grep -q "Mode:Monitor"; then
        echo "[ERROR] '${AINTERFACE}' must be in monitor mode."
        exitfail
    fi
}

#----------------------------------------------------------
# Function: shuffle_file
#----------------------------------------------------------
shuffle_file() {
    input_file="$1"
    base_name=$(basename "${input_file}")
    temp_file="/tmp/${base_name}.shuff"
    shuf "${input_file}" | awk -F',' 'BEGIN { OFS="," } {print $1,$2}' > "${temp_file}"
    FILE="${temp_file}"
}

#----------------------------------------------------------
# Function: prompt_stop_scan
#----------------------------------------------------------
prompt_stop_scan() {
    read -e -p "A scan or capture is already running. Stop it and continue? (Y/N): " choice
    case "$choice" in
        [yY])
            pineap stop_scan
            pineap handshake_capture_stop
            echo "The running scan has been stopped."
            ;;
        [nN])
            echo "Current scan not stopped. Exiting..."
            exitfail
            ;;
        *)
            echo "Invalid choice. Exiting..."
            exitfail
            ;;
    esac
}

#----------------------------------------------------------
# Command-line parsing using a while loop
#----------------------------------------------------------
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -f)
            if [ -z "$2" ]; then
                echo "[ERROR]: Missing argument for -f"
                exit 1
            fi
            FILE="$2"
            ORIGIN_FILE="$2"
            shift 2
            ;;
        -t)
            if [ -z "$2" ]; then
                echo "[ERROR]: Missing argument for -t"
                exit 1
            fi
            TIMER="$2"
            shift 2
            ;;
        -m)
            if [ -z "$2" ]; then
                echo "[ERROR]: Missing argument for -m"
                exit 1
            fi
            MODE="$2"
            shift 2
            ;;
        -i)
            if [ -z "$2" ]; then
                echo "[ERROR]: Missing argument for -i"
                exit 1
            fi
            AINTERFACE="$2"
            shift 2
            ;;
        -s)
            SHUFFLE=true
            SHUFFLE_FILE="${FILE}.shuff"
            shift
            ;;
        -u)
            UPDATE=true
            shift
            ;;
        --kf)
            KEEP_FILE=true
            shift
            ;;
        *)
            echo "[ERROR]: Invalid option: $1"
            usage
            exit 1
            ;;
    esac
done

check_input_and_timer() {
    if [ -z "${FILE}" ] || [ -z "${TIMER}" ]; then
        echo "[ERROR]: Both input file (-f) and timer (-t) must be set."
        usage
    fi
}
check_input_exists() {
    if [ ! -f "${FILE}" ]; then
        echo "[ERROR]: Input file '${FILE}' not found."
        exitfail
    fi
}
# Call input checks
check_input_and_timer
check_input_exists

# Call shuffle check before processing
shuffle_file_check() {
    if $SHUFFLE; then
        shuffle_file "${FILE}"
    fi
}
shuffle_file_check

#----------------------------------------------------------
# Modified pineap_interface_check using valid channel arrays.
#----------------------------------------------------------
pineap_interface_check() {
    if [ -n "${AINTERFACE}" ]; then
        INTERFACE="${AINTERFACE}"
    else
        if ! command -v uci >/dev/null 2>&1 || ! command -v pineap >/dev/null 2>&1; then
            echo "[ERROR]: Required pineap commands are missing."
            echo "[INFO]: This is because you are not using a Pineapple MK7. Pleae use -m 2"
            exitfail
        fi
        INTERFACE=$(uci show pineap | grep "pineap_interface" | awk -F"'" '{print $2}')
        if [ -z "${INTERFACE}" ]; then
            echo "[ERROR]: Unable to determine the Pineap interface. Exiting..."
            exitfail
        fi
    fi
}

pineap_interface_check
detect_supported_bands

#----------------------------------------------------------
# Function: validate_channel_range
#----------------------------------------------------------
validate_channel_range() {
    if [[ -n "$FILE" ]]; then
        OUTPUT_FILE="${FILE}.${CDATE}"
        > "$OUTPUT_FILE"  # Clear the file
        declare -a SKIPPED_APS
        mapfile -t AP_ENTRIES < <(awk -F"," '{print $1 "," $2}' "$FILE" | uniq)
        for entry in "${AP_ENTRIES[@]}"; do
            IFS=',' read -r ap_bssid channel <<< "$entry"
            if [[ -z "$channel" || ! "$channel" =~ ^[0-9]+$ ]]; then
                SKIPPED_APS+=("$ap_bssid - Channel invalid or empty")
                continue
            fi
            if [[ "$channel" -le 14 ]]; then
                if [[ "$IS_24GHZ_SUPPORTED" = false ]]; then
                    SKIPPED_APS+=("$ap_bssid - 2.4GHz not supported")
                    continue
                elif [[ ! " ${VALID_24GHZ_CHANNELS[@]} " =~ " $channel " ]]; then
                    SKIPPED_APS+=("$ap_bssid - Invalid 2.4GHz channel $channel")
                    continue
                fi
            elif [[ "$channel" -ge 36 ]]; then
                if [[ "$IS_5GHZ_SUPPORTED" = false ]]; then
                    SKIPPED_APS+=("$ap_bssid - 5GHz not supported")
                    continue
                elif [[ ! " ${VALID_5GHZ_CHANNELS[@]} " =~ " $channel " ]]; then
                    SKIPPED_APS+=("$ap_bssid - Invalid 5GHz channel $channel")
                    continue
                fi
            else
                SKIPPED_APS+=("$ap_bssid - Unknown band or invalid channel $channel")
                continue
            fi
            echo "$ap_bssid,$channel" >> "$OUTPUT_FILE"
        done
        FILE="$OUTPUT_FILE"
        if [[ ${#SKIPPED_APS[@]} -gt 0 ]]; then
            echo -e "\n[SUMMARY]: Skipped APs:"
            for skipped in "${SKIPPED_APS[@]}"; do
                echo "  $skipped"
            done
            echo "Continuing in ${SKIPPED_AP_DELAY} seconds..."
            sleep "${SKIPPED_AP_DELAY}"
        fi
        echo "AP validation complete. Results saved to ${OUTPUT_FILE}"
    fi
}

update_flag_check() {
    if $UPDATE; then
        echo "Update flag detected."
        read -e -p "Enter SCANTIME (default: ${DEFAULT_SCANTIME}s): " SCANTIME
        SCANTIME=${SCANTIME:-$DEFAULT_SCANTIME}
        read -e -p "Enter FILTERBYDATA (default: ${DEFAULT_FILTERBYDATA}): " FILTERBYDATA
        FILTERBYDATA=${FILTERBYDATA:-$DEFAULT_FILTERBYDATA}
        read -e -p "Enter WRITEINT (default: ${DEFAULT_WRITEINT}s): " WRITEINT
        WRITEINT=${WRITEINT:-$DEFAULT_WRITEINT}
        read -e -p "Enter FILTERUNASSOC (default: ${DEFAULT_FILTERUNASSOC}): " FILTERUNASSOC
        FILTERUNASSOC=${FILTERUNASSOC:-$DEFAULT_FILTERUNASSOC}
        updatechannels "${SCANTIME}" "${FILTERBYDATA}" "${WRITEINT}" "${FILTERUNASSOC}"
    fi
}

update_flag_check
validate_channel_range

pineap_scan_check() {
    status=$(pineap get_status)
    if [[ $status =~ "\"bssid\":" && $status =~ "\"captureRunning\": true" && $status =~ "\"scanRunning\": false" ]]; then
        prompt_stop_scan
    elif [[ $status =~ "\"scanRunning\": true" ]]; then
        prompt_stop_scan
    fi
}
pineap_scan_check

bssid_format_check() {
    if ! awk -F',' '{if (!match($1, /^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}$/) || !match($2, /^[0-9]{1,3}$/)) exit 1}' "${FILE}"; then
        echo "[ERROR]: Each line must be in the format 'BSSID,CHANNEL'."
        exitfail
    fi
}
bssid_format_check

bssid_count_check() {
    BSSID_COUNT=$(awk -F',' 'NF==2 {print $0}' "${FILE}" | wc -l)
    echo "Total BSSIDs in the file: ${BSSID_COUNT}"
}
bssid_count_check

pmode_name_check() {
    if [ "${MODE}" == 1 ]; then
        PMODE="pineap (1)"
    elif [ "${MODE}" == 2 ]; then
        PMODE="airodump-ng (2)"
    else
        PMODE=""
    fi
}
pmode_name_check

#----------------------------------------------------------
# Main processing based on MODE
#----------------------------------------------------------
if [ "${MODE}" == 1 ]; then
    first_run=true
    while true; do
        if [ "$first_run" = true ]; then
            uci set pineap.@config[0].pineap_interface="${INTERFACE}" # Set pineap to right interface prior
            echo "Starting Handshake capture in 10 seconds with the following options:"
            echo "------------------------------"
            echo "Time Started: $(date)"
            echo "------------------------------"
            while IFS=',' read -r BSSID CHANNEL || [ -n "$BSSID" ]; do
                echo "Target WAP: ${BSSID}"
                echo "Target Channel: ${CHANNEL}"
            done < "${FILE}"
            echo "Mode: ${PMODE}"
            echo "Interface: ${INTERFACE}"
            echo "------------------------------"
            sleep 10
            first_run=false
        fi
        while IFS=',' read -r BSSID CHANNEL || [ -n "$BSSID" ]; do
            echo "Setting interface ${INTERFACE} channel to ${CHANNEL}"
            iwconfig "${INTERFACE}" channel "${CHANNEL}"
            sleep 0.5
            echo "Set channel to ${CHANNEL}"
            echo
            echo "Started Handshake capture."
            echo "------------------------------"
            echo "Time Started: $(date)"
            echo "------------------------------"
            echo "Target WAP: ${BSSID}"
            echo "Target Channel: ${CHANNEL}"
            uci set pineap.@config[0].pineap_interface="${INTERFACE}"
            sync
            sleep 1
            pineap handshake_capture_start "${BSSID}" "${CHANNEL}"
            echo "Sleeping for ${TIMER} seconds"
            sleep "${TIMER}"
            echo "Stopped Handshake Capture"
            pineap handshake_capture_stop
        done < "${FILE}"
        if [ -z "$BSSID" ]; then
            echo "All BSSIDs completed."
            break
        fi
    done
elif [ "${MODE}" == 2 ]; then
    ainterface_check
    first_run=true
    while true; do
        if [ "$first_run" = true ]; then
            echo "Starting Handshake capture in 10 seconds with the following options:"
            echo "------------------------------"
            echo "Time Started: $(date)"
            echo "------------------------------"
            while IFS=',' read -r BSSID CHANNEL || [ -n "$BSSID" ]; do
                echo "Target WAP: ${BSSID}"
                echo "Target Channel: ${CHANNEL}"
            done < "${FILE}"
            echo "Mode: ${PMODE}"
            echo "Interface: ${AINTERFACE}"
            echo "------------------------------"
            sleep 10
            first_run=false
        fi
        while IFS=',' read -r BSSID CHANNEL || [ -n "$BSSID" ]; do
            iwconfig "${AINTERFACE}" channel "${CHANNEL}"
            echo
            echo "Started Handshake capture."
            echo "------------------------------"
            echo "Time Started: $(date)"
            echo "------------------------------"
            echo "Target WAP: ${BSSID}"
            echo "Target Channel: ${CHANNEL}"
            screen -dmS "capture-${SCREENUID}" airodump-ng --bssid "${BSSID}" --channel "${CHANNEL}" -w "${AIRODUMP_OUTPUT}/${CDATE}_${BSSID}" --output-format pcap "${AINTERFACE}"
            echo "Sleeping for ${TIMER} seconds"
            sleep "${TIMER}"
            echo "Stopped Handshake Capture"
            screen -S "capture-${SCREENUID}" -X quit

            echo "Renaming generated .pcap files to the format {DATE}_{BSSID}.{INCREMENT}.cap..."
            for current_file in "${AIRODUMP_OUTPUT}/${CDATE}_${BSSID}-"*.cap; do
                if [ -f "$current_file" ]; then
                    # Store original file name to prevent issues
                    original_file="$current_file"

                    # Replace any remaining colons with dashes
                    current_file="${current_file//:/-}"

                    # Remove trailing '-01', '-02', etc., ensuring we get {DATE}_{BSSID}
                    base="${current_file%-[0-9][0-9].cap}"
                    ext="cap"

                    # Find the next available numbered file
                    i=1
                    new_file="${base}.$(printf "%02d" $i).${ext}"
                    while [ -f "$new_file" ]; do
                        i=$((i+1))
                        new_file="${base}.$(printf "%02d" $i).${ext}"
                    done

                    # Rename the file
                    if mv "$original_file" "$new_file"; then
                        echo "Renamed: $original_file -> $new_file"
                    else
                        echo "Failed to rename: $original_file" >&2
                    fi
                fi
            done
        done < "${FILE}"
        if [ -z "$BSSID" ]; then
            echo "All BSSIDs completed."
            break
        fi
    done
else
    echo "Please enter a valid mode number (1 or 2)."
fi

if $SHUFFLE; then
    rm "${FILE}"
fi
rm "${LOCK_FILE}"